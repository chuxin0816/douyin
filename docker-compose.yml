name: douyin
services:
  api:
    image: ghcr.io/chuxin0816/douyin:api
    ports:
      - "8888:8888"
    environment:
      TZ: Asia/Shanghai
    sysctls:
      net.ipv4.ip_local_port_range: "15000 65000"
    depends_on:
      consul:
        condition: service_healthy
      redis-slave:
        condition: service_healthy
    container_name: Api
    
  user:
    image: ghcr.io/chuxin0816/douyin:user
    ports:
      - "8891:8891"
    environment:
      TZ: Asia/Shanghai
    depends_on:
      consul:
        condition: service_healthy
      postgres-master:
        condition: service_healthy
      postgres-slave:
        condition: service_healthy
      redis-slave:
        condition: service_healthy
      kafka-ui:
        condition: service_healthy
      jaeger:
        condition: service_healthy
    container_name: User

  video:
    image: ghcr.io/chuxin0816/douyin:video
    ports:
      - "8892:8892"
    environment:
      TZ: Asia/Shanghai
    depends_on:
      consul:
        condition: service_healthy
      postgres-master:
        condition: service_healthy
      postgres-slave:
        condition: service_healthy
      redis-slave:
        condition: service_healthy
      kafka-ui:
        condition: service_healthy
      jaeger:
        condition: service_healthy
    container_name: Video

  favorite:
    image: ghcr.io/chuxin0816/douyin:favorite
    ports:
      - "8893:8893"
    environment:
      TZ: Asia/Shanghai
    depends_on:
      consul:
        condition: service_healthy
      postgres-master:
        condition: service_healthy
      postgres-slave:
        condition: service_healthy
      redis-slave:
        condition: service_healthy
      kafka-ui:
        condition: service_healthy
      jaeger:
        condition: service_healthy
    container_name: Favorite

  comment:
    image: ghcr.io/chuxin0816/douyin:comment
    ports:
      - "8894:8894"
    environment:
      TZ: Asia/Shanghai
    depends_on:
      consul:
        condition: service_healthy
      postgres-master:
        condition: service_healthy
      postgres-slave:
        condition: service_healthy
      redis-slave:
        condition: service_healthy
      kafka-ui:
        condition: service_healthy
      jaeger:
        condition: service_healthy
    container_name: Comment

  relation:
    image: ghcr.io/chuxin0816/douyin:relation
    ports:
      - "8895:8895"
    environment:
      TZ: Asia/Shanghai
    depends_on:
      consul:
        condition: service_healthy
      postgres-master:
        condition: service_healthy
      postgres-slave:
        condition: service_healthy
      redis-slave:
        condition: service_healthy
      kafka-ui:
        condition: service_healthy
      jaeger:
        condition: service_healthy
    container_name: Relation

  message:
    image: ghcr.io/chuxin0816/douyin:message
    ports:
      - "8896:8896"
    environment:
      TZ: Asia/Shanghai
    depends_on:
      consul:
        condition: service_healthy
      postgres-master:
        condition: service_healthy
      postgres-slave:
        condition: service_healthy 
      redis-slave:
        condition: service_healthy
      kafka-ui:
        condition: service_healthy
      jaeger:
        condition: service_healthy
    container_name: Message

  postgres-master:
    image: bitnami/postgresql:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: 123456
      POSTGRES_DB: douyin
      POSTGRESQL_REPLICATION_MODE: master
      POSTGRESQL_REPLICATION_USER: replicator
      POSTGRESQL_REPLICATION_PASSWORD: replicator_passwd
      TZ: Asia/Shanghai
    volumes:
      - ./etc/postgresql.conf:/bitnami/postgresql/conf/postgresql.conf
      - ./etc/douyin.sql:/docker-entrypoint-initdb.d/douyin.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    container_name: Postgres-master
      
  postgres-slave:
    image: bitnami/postgresql:latest
    ports:
      - "5433:5432"
    environment:
      POSTGRES_PASSWORD: 123456
      POSTGRES_DB: douyin
      POSTGRESQL_REPLICATION_MODE: slave
      POSTGRESQL_MASTER_HOST: postgres-master
      POSTGRESQL_MASTER_PORT_NUMBER: 5432
      POSTGRESQL_REPLICATION_USER: replicator
      POSTGRESQL_REPLICATION_PASSWORD: replicator_passwd
      TZ: Asia/Shanghai
    volumes:
      - ./etc/postgresql.conf:/bitnami/postgresql/conf/postgresql.conf
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
    container_name: Postgres-slave
  
  debezium:
    image: debezium/connect:latest
    ports:
      - "8083:8083"
    environment:
      - BOOTSTRAP_SERVERS=kafka-0:9092,kafka-1:9092,kafka-2:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
      - TZ=Asia/Shanghai
    depends_on:
      kafka-0:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
    volumes:
      - ./etc/debezium.json:/etc/debezium/debezium.json
      - ./etc/debezium-start.sh:/etc/debezium/debezium-start.sh
    entrypoint: ["/etc/debezium/debezium-start.sh"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/connectors/postgres-connector/status"]
      interval: 10s
      timeout: 2s
      retries: 10
    container_name: Debezium
  
  redis-master:
    image: redis/redis-stack-server:latest
    ports:
      - "6379:6379"
    environment:
      TZ: Asia/Shanghai
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./etc/redis_master.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "123456", "ping"]
      interval: 10s
      timeout: 2s
      retries: 3
    container_name: Redis-master

  redis-slave:
    image: redis/redis-stack-server:latest
    ports:
      - "6380:6379"
    environment:
      TZ: Asia/Shanghai
    depends_on:
      redis-master:
        condition: service_healthy
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./etc/redis_slave.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "123456", "ping"]
      interval: 10s
      timeout: 2s
      retries: 3
    container_name: Redis-slave

  redis-sentinel1:
    image: redis:latest
    ports:
      - "26379:26379"
    environment:
      TZ: Asia/Shanghai
    depends_on:
      - redis-master
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    volumes:
      - ./etc/sentinel.conf:/usr/local/etc/redis/sentinel.conf
    container_name: Redis-sentinel1

  redis-sentinel2:
    image: redis:latest
    ports:
      - "26380:26379"
    environment:
      TZ: Asia/Shanghai
    depends_on:
      - redis-master
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    volumes:
      - ./etc/sentinel.conf:/usr/local/etc/redis/sentinel.conf
    container_name: Redis-sentinel2

  redis-sentinel3:
    image: redis:latest
    ports:
      - "26381:26379"
    environment:
      TZ: Asia/Shanghai
    depends_on:
      - redis-master
    command: redis-sentinel /usr/local/etc/redis/sentinel.conf
    volumes:
      - ./etc/sentinel.conf:/usr/local/etc/redis/sentinel.conf
    container_name: Redis-sentinel3

  kafka-0:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-0:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # Clustering
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
      - TZ=Asia/Shanghai
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 2s
      retries: 3
    container_name: Kafka-0
  kafka-1:
    image: bitnami/kafka:latest
    ports:
      - "9093:9092"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # Clustering
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
      - TZ=Asia/Shanghai
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 2s
      retries: 3
    container_name: Kafka-1
  kafka-2:
    image: bitnami/kafka:latest
    ports:
      - "9094:9092"
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      - KAFKA_KRAFT_CLUSTER_ID=abcdefghijklmnopqrstuv
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      # Clustering
      - KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=3
      - KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR=2
      - TZ=Asia/Shanghai
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 2s
      retries: 3
    container_name: Kafka-2

  kafka-ui:
    image: provectuslabs/kafka-ui:master
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka-0:9092,kafka-1:9092,kafka-2:9092
      - TZ=Asia/Shanghai
    depends_on:
      debezium:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8080"]
      interval: 10s
      timeout: 2s
      retries: 3
    container_name: Kafka-ui

  consul:
    image: consul:1.15.4
    ports:
      - "8500:8500"
    environment:
      TZ: Asia/Shanghai
    volumes:
      - ./etc/config.yaml:/config.yaml
    command: >
      /bin/sh -c "
        docker-entrypoint.sh agent -dev -client=0.0.0.0 &  # 启动 Consul 服务
        while ! nc -z localhost 8500; do sleep 1; done;  # 等待 Consul 服务开始监听端口 8500
        curl -X PUT --data-binary @/config.yaml http://localhost:8500/v1/kv/conf/config.yaml  # 将 config.yaml 文件的内容上传到 Consul
        wait %1  # 等待后台的 Consul 服务
      "
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "8500"]
      interval: 10s
      timeout: 2s
      retries: 3
    container_name: Consul
  
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    environment:
      TZ: Asia/Shanghai
    volumes:
      - ./etc/prometheus.yaml:/etc/prometheus/prometheus.yaml
    command:
      - "--config.file=/etc/prometheus/prometheus.yaml"
    container_name: Prometheus

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - TZ=Asia/Shanghai
    container_name: Grafana

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686"
      - "4318:4318"
    environment:
      TZ: Asia/Shanghai
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "16686"]
      interval: 10s
      timeout: 2s
      retries: 3
    container_name: Jaeger

  nebula-metad:
    image: docker.io/vesoft/nebula-metad:latest
    ports:
      - 9559:9559
      - 19559:19559
      - 19560:19560
    environment:
      USER: root
      TZ: Asia/Shanghai
    command:
      - --meta_server_addrs=nebula-metad:9559
      - --local_ip=nebula-metad
      - --ws_ip=nebula-metad
      - --port=9559
      - --ws_http_port=19559
      - --data_path=/data/meta
      - --log_dir=/logs
      - --v=0
      - --minloglevel=0
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://nebula-metad:19559/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: on-failure
    cap_add:
      - SYS_PTRACE
    container_name: Nebula-metad

  nebula-storaged:
    image: docker.io/vesoft/nebula-storaged:latest
    ports:
      - 9779:9779
      - 19779:19779
      - 19780:19780
    environment:
      USER: root
      TZ: Asia/Shanghai
    command:
      - --meta_server_addrs=nebula-metad:9559
      - --local_ip=nebula-storaged
      - --ws_ip=nebula-storaged
      - --port=9779
      - --ws_http_port=19779
      - --data_path=/data/storage
      - --log_dir=/logs
      - --v=0
      - --minloglevel=0
    depends_on:
      - nebula-metad
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://nebula-storaged:19779/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: on-failure
    cap_add:
      - SYS_PTRACE
    container_name: Nebula-storaged

  nebula-graphd:
    image: docker.io/vesoft/nebula-graphd:latest
    ports:
      - 9669:9669
      - 19669:19669
      - 19670:19670
    environment:
      USER: root
      TZ: Asia/Shanghai
    command:
      - --meta_server_addrs=nebula-metad:9559
      - --port=9669
      - --local_ip=nebula-graphd
      - --ws_ip=nebula-graphd
      - --ws_http_port=19669
      - --log_dir=/logs
      - --v=0
      - --minloglevel=0
    depends_on:
      - nebula-storaged
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://nebula-graphd:19669/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: on-failure
    cap_add:
      - SYS_PTRACE
    container_name: Nebula-graphd

  nebula-console:
    image: docker.io/vesoft/nebula-console:v3.6.0
    environment:
      TZ: Asia/Shanghai
    entrypoint: ""
    volumes:
      - ./etc/user.ngpl:/user.ngpl
    command: 
      - sh
      - -c
      - |
        for i in `seq 1 60`;do
          var=`nebula-console -addr nebula-graphd -port 9669 -u root -p nebula -e 'ADD HOSTS "nebula-storaged":9779'`;
          if [[ $$? == 0 ]];then
            break;
          fi;
          sleep 1;
          echo "retry to add hosts.";
        done 
        nebula-console -addr nebula-graphd -port 9669 -u root -p nebula -f /user.ngpl;
        tail -f /dev/null
    depends_on:
      - nebula-graphd
    container_name: Nebula-console