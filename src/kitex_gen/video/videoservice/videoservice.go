// Code generated by Kitex v0.8.0. DO NOT EDIT.

package videoservice

import (
	"context"
	video "douyin/src/kitex_gen/video"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return videoServiceServiceInfo
}

var videoServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "VideoService"
	handlerType := (*video.VideoService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Feed":          kitex.NewMethodInfo(feedHandler, newVideoServiceFeedArgs, newVideoServiceFeedResult, false),
		"PublishAction": kitex.NewMethodInfo(publishActionHandler, newVideoServicePublishActionArgs, newVideoServicePublishActionResult, false),
		"PublishList":   kitex.NewMethodInfo(publishListHandler, newVideoServicePublishListArgs, newVideoServicePublishListResult, false),
		"PublishIDList": kitex.NewMethodInfo(publishIDListHandler, newVideoServicePublishIDListArgs, newVideoServicePublishIDListResult, false),
		"VideoInfo":     kitex.NewMethodInfo(videoInfoHandler, newVideoServiceVideoInfoArgs, newVideoServiceVideoInfoResult, false),
		"VideoInfoList": kitex.NewMethodInfo(videoInfoListHandler, newVideoServiceVideoInfoListArgs, newVideoServiceVideoInfoListResult, false),
		"WorkCount":     kitex.NewMethodInfo(workCountHandler, newVideoServiceWorkCountArgs, newVideoServiceWorkCountResult, false),
		"AuthorId":      kitex.NewMethodInfo(authorIdHandler, newVideoServiceAuthorIdArgs, newVideoServiceAuthorIdResult, false),
		"VideoExist":    kitex.NewMethodInfo(videoExistHandler, newVideoServiceVideoExistArgs, newVideoServiceVideoExistResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "video",
		"ServiceFilePath": `../../idl/video.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func feedHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceFeedArgs)
	realResult := result.(*video.VideoServiceFeedResult)
	success, err := handler.(video.VideoService).Feed(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceFeedArgs() interface{} {
	return video.NewVideoServiceFeedArgs()
}

func newVideoServiceFeedResult() interface{} {
	return video.NewVideoServiceFeedResult()
}

func publishActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServicePublishActionArgs)
	realResult := result.(*video.VideoServicePublishActionResult)
	success, err := handler.(video.VideoService).PublishAction(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServicePublishActionArgs() interface{} {
	return video.NewVideoServicePublishActionArgs()
}

func newVideoServicePublishActionResult() interface{} {
	return video.NewVideoServicePublishActionResult()
}

func publishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServicePublishListArgs)
	realResult := result.(*video.VideoServicePublishListResult)
	success, err := handler.(video.VideoService).PublishList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServicePublishListArgs() interface{} {
	return video.NewVideoServicePublishListArgs()
}

func newVideoServicePublishListResult() interface{} {
	return video.NewVideoServicePublishListResult()
}

func publishIDListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServicePublishIDListArgs)
	realResult := result.(*video.VideoServicePublishIDListResult)
	success, err := handler.(video.VideoService).PublishIDList(ctx, realArg.UserId)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServicePublishIDListArgs() interface{} {
	return video.NewVideoServicePublishIDListArgs()
}

func newVideoServicePublishIDListResult() interface{} {
	return video.NewVideoServicePublishIDListResult()
}

func videoInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceVideoInfoArgs)
	realResult := result.(*video.VideoServiceVideoInfoResult)
	success, err := handler.(video.VideoService).VideoInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoInfoArgs() interface{} {
	return video.NewVideoServiceVideoInfoArgs()
}

func newVideoServiceVideoInfoResult() interface{} {
	return video.NewVideoServiceVideoInfoResult()
}

func videoInfoListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceVideoInfoListArgs)
	realResult := result.(*video.VideoServiceVideoInfoListResult)
	success, err := handler.(video.VideoService).VideoInfoList(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newVideoServiceVideoInfoListArgs() interface{} {
	return video.NewVideoServiceVideoInfoListArgs()
}

func newVideoServiceVideoInfoListResult() interface{} {
	return video.NewVideoServiceVideoInfoListResult()
}

func workCountHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceWorkCountArgs)
	realResult := result.(*video.VideoServiceWorkCountResult)
	success, err := handler.(video.VideoService).WorkCount(ctx, realArg.UserId)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newVideoServiceWorkCountArgs() interface{} {
	return video.NewVideoServiceWorkCountArgs()
}

func newVideoServiceWorkCountResult() interface{} {
	return video.NewVideoServiceWorkCountResult()
}

func authorIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceAuthorIdArgs)
	realResult := result.(*video.VideoServiceAuthorIdResult)
	success, err := handler.(video.VideoService).AuthorId(ctx, realArg.VideoId)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newVideoServiceAuthorIdArgs() interface{} {
	return video.NewVideoServiceAuthorIdArgs()
}

func newVideoServiceAuthorIdResult() interface{} {
	return video.NewVideoServiceAuthorIdResult()
}

func videoExistHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*video.VideoServiceVideoExistArgs)
	realResult := result.(*video.VideoServiceVideoExistResult)
	success, err := handler.(video.VideoService).VideoExist(ctx, realArg.VideoId)
	if err != nil {
		return err
	}
	realResult.Success = &success
	return nil
}
func newVideoServiceVideoExistArgs() interface{} {
	return video.NewVideoServiceVideoExistArgs()
}

func newVideoServiceVideoExistResult() interface{} {
	return video.NewVideoServiceVideoExistResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Feed(ctx context.Context, req *video.FeedRequest) (r *video.FeedResponse, err error) {
	var _args video.VideoServiceFeedArgs
	_args.Req = req
	var _result video.VideoServiceFeedResult
	if err = p.c.Call(ctx, "Feed", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishAction(ctx context.Context, req *video.PublishActionRequest) (r *video.PublishActionResponse, err error) {
	var _args video.VideoServicePublishActionArgs
	_args.Req = req
	var _result video.VideoServicePublishActionResult
	if err = p.c.Call(ctx, "PublishAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishList(ctx context.Context, req *video.PublishListRequest) (r *video.PublishListResponse, err error) {
	var _args video.VideoServicePublishListArgs
	_args.Req = req
	var _result video.VideoServicePublishListResult
	if err = p.c.Call(ctx, "PublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishIDList(ctx context.Context, userId int64) (r []int64, err error) {
	var _args video.VideoServicePublishIDListArgs
	_args.UserId = userId
	var _result video.VideoServicePublishIDListResult
	if err = p.c.Call(ctx, "PublishIDList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoInfo(ctx context.Context, req *video.VideoInfoRequest) (r *video.Video, err error) {
	var _args video.VideoServiceVideoInfoArgs
	_args.Req = req
	var _result video.VideoServiceVideoInfoResult
	if err = p.c.Call(ctx, "VideoInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoInfoList(ctx context.Context, req *video.VideoInfoListRequest) (r []*video.Video, err error) {
	var _args video.VideoServiceVideoInfoListArgs
	_args.Req = req
	var _result video.VideoServiceVideoInfoListResult
	if err = p.c.Call(ctx, "VideoInfoList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) WorkCount(ctx context.Context, userId int64) (r int64, err error) {
	var _args video.VideoServiceWorkCountArgs
	_args.UserId = userId
	var _result video.VideoServiceWorkCountResult
	if err = p.c.Call(ctx, "WorkCount", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) AuthorId(ctx context.Context, videoId int64) (r int64, err error) {
	var _args video.VideoServiceAuthorIdArgs
	_args.VideoId = videoId
	var _result video.VideoServiceAuthorIdResult
	if err = p.c.Call(ctx, "AuthorId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) VideoExist(ctx context.Context, videoId int64) (r bool, err error) {
	var _args video.VideoServiceVideoExistArgs
	_args.VideoId = videoId
	var _result video.VideoServiceVideoExistResult
	if err = p.c.Call(ctx, "VideoExist", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
